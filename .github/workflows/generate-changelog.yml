name: Generate and Publish Changelog

on:
  push:
    branches: ["main"]
  workflow_dispatch:
  release:
    types: [created]

permissions:
  contents: write

jobs:
  build-changelog:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # need full history & tags

      - name: Generate CHANGELOG.md (newest tags first, with date & author)
        shell: bash
        run: |
          set -euo pipefail

          # Get all tags newest -> oldest
          mapfile -t TAGS < <(git tag --sort=-creatordate)
          if [[ ${#TAGS[@]} -eq 0 ]]; then
            echo "No tags found; nothing to write."
            exit 0
          fi

          # Find repository's first commit to bound oldest tag's range
          ROOT_COMMIT="$(git rev-list --max-parents=0 HEAD | tail -n1)"

          TMP_FILE="$(mktemp)"
          {
            # ---- Header (exactly as requested) ----
            echo "# Changelog"
            echo "All notable changes to this project will be documented in this file."
            echo
            echo "The project is created and maintained by [Richard Koranteng](https://rkkoranteng.com), and adheres to [Calendar Versioning](https://calver.org/)."
            echo
            # ---------------------------------------

            # For each tag: gather commits between it and the next older tag
            for (( i=0; i<${#TAGS[@]}; i++ )); do
              CUR="${TAGS[$i]}"
              NEXT_OLD="${TAGS[$((i+1))]:-}"

              if [[ -n "$NEXT_OLD" ]]; then
                RANGE="${NEXT_OLD}..${CUR}"
              else
                RANGE="${ROOT_COMMIT}..${CUR}"
              fi

              # Get commits (exclude merges), format: date|subject|author
              # Exclude the auto-changelog commit exactly:
              #   docs: regenerate CHANGELOG [skip ci]
              COMMITS="$(git log --no-merges --date=short --pretty=format:'%ad|%s|%an' "$RANGE" \
                | grep -Fv 'docs: regenerate CHANGELOG [skip ci]' || true)"

              [[ -z "$COMMITS" ]] && continue

              echo "## ${CUR}"
              # Print: - YYYY-MM-DD : subject (author)
              while IFS='|' read -r cdate csubject cauthor; do
                echo "- ${cdate} : ${csubject} (${cauthor})"
              done <<< "$COMMITS"
              echo
            done
          } > "$TMP_FILE"

          # Only update file if content changed
          if [[ ! -f CHANGELOG.md ]] || ! diff -q "$TMP_FILE" CHANGELOG.md >/dev/null 2>&1; then
            mv "$TMP_FILE" CHANGELOG.md
          else
            echo "CHANGELOG.md is already up to date."
          fi

      - name: Commit & push (if changed)
        run: |
          if [[ -n "$(git status --porcelain CHANGELOG.md)" ]]; then
            git config user.name  "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add CHANGELOG.md
            git commit -m "docs: regenerate CHANGELOG [skip ci]"
            git push
          else
            echo "No changelog update needed."
          fi
