name: Generate and Publish Changelog

on:
  push:
    branches: ["main"]
  workflow_dispatch:
  release:
    types: [created]

permissions:
  contents: write

jobs:
  build-changelog:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # full history & tags

      - name: Generate CHANGELOG.md (grouped by sections)
        shell: bash
        run: |
          set -euo pipefail

          # All tags, newest -> oldest
          mapfile -t TAGS < <(git tag --sort=-creatordate)
          if [[ ${#TAGS[@]} -eq 0 ]]; then
            echo "No tags found; nothing to write."
            exit 0
          fi

          # Root commit for bounding oldest tag range
          ROOT_COMMIT="$(git rev-list --max-parents=0 HEAD | tail -n1)"

          # Section map: Title|regex (for filtering lines where the subject starts with this prefix)
          # NOTE: case-insensitive matching via grep -Ei
          SECTIONS=(
            "Added|\\|(add:|add)\\b"
            "Refactor|\\|(refactor:|refactor|ref:|ref)\\b"
            "Fixed|\\|(fix:|fix)\\b"
            "Deleted|\\|(delete:|delete|del:|del)\\b"
          )

          TMP_FILE="$(mktemp)"
          {
            # ---- Header (exactly as requested) ----
            echo "# Changelog"
            echo "All notable changes to this project will be documented in this file."
            echo
            echo "The project is created and maintained by [Richard Koranteng](https://rkkoranteng.com), and adheres to [Calendar Versioning](https://calver.org/)."
            echo
            # ---------------------------------------

            # Iterate tags newest -> oldest
            for (( i=0; i<${#TAGS[@]}; i++ )); do
              CUR="${TAGS[$i]}"
              NEXT_OLD="${TAGS[$((i+1))]:-}"

              if [[ -n "$NEXT_OLD" ]]; then
                RANGE="${NEXT_OLD}..${CUR}"
              else
                RANGE="${ROOT_COMMIT}..${CUR}"
              fi

              # Collect all commits in range (no merges), format date|subject|author
              ALL_COMMITS="$(git log --no-merges --date=short --pretty=format:'%ad|%s|%an' "$RANGE" || true)"
              # Exclude the auto-generated changelog commit exactly (subject match)
              ALL_COMMITS="$(printf "%s\n" "$ALL_COMMITS" | grep -Fv '|docs: regenerate CHANGELOG [skip ci]' || true)"

              # If no commits after filtering, skip the section entirely
              [[ -z "$ALL_COMMITS" ]] && continue

              echo "## ${CUR}"

              any_section_emitted=0
              for entry in "${SECTIONS[@]}"; do
                IFS="|" read -r TITLE REGEX <<< "$entry"

                # Filter for this section based on the prefix at the start of the subject
                SECTION_COMMITS="$(printf "%s\n" "$ALL_COMMITS" | grep -Ei "$REGEX" || true)"
                [[ -z "$SECTION_COMMITS" ]] && continue

                # Emit bullets for the section; requested format:
                # - YYYY-MM-DD : subject (author)
                while IFS='|' read -r cdate csubject cauthor; do
                  # Strip the leading prefix variants from the subject (case-insensitive)
                  clean_subject="$(printf "%s" "$csubject" \
                    | sed -E 's/^(add:|add|refactor:|refactor|ref:|ref|fix:|fix|delete:|delete|del:|del)[[:space:]]*//I')"
                  echo "- ${cdate} : ${clean_subject} (${cauthor})"
                done <<< "$SECTION_COMMITS"

                any_section_emitted=1
              done

              # If nothing matched any section (unlikely), don't leave an empty tag section
              [[ "$any_section_emitted" -eq 1 ]] && echo
            done
          } > "$TMP_FILE"

          # Only update file if content changed
          if [[ ! -f CHANGELOG.md ]] || ! diff -q "$TMP_FILE" CHANGELOG.md >/dev/null 2>&1; then
            mv "$TMP_FILE" CHANGELOG.md
          else
            echo "CHANGELOG.md is already up to date."
          fi

      - name: Commit & push (if changed)
        run: |
          if [[ -n "$(git status --porcelain CHANGELOG.md)" ]]; then
            git config user.name  "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add CHANGELOG.md
            git commit -m "docs: regenerate CHANGELOG [skip ci]"
            git push
          else
            echo "No changelog update needed."
          fi
